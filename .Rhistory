#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
source('resources.R')
source('resources.R')
source('resources.R')
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("percent",
"Threshhold on the percentqge of votes on every juristiction",
min = 0,
max = 20,
value = 0)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("seats")
)
)
)
server <- function(input, output) {
output$seats <- renderPlot({
# generate bins based on input$bins from ui.R
data_to_use <- good_data(data_ready, x = input$percent)
data_to_use %>%
mutate(party = fct_reorder(party, total_seats)) %>%
ggplot() +
geom_col(aes(x = total_seats,
y = party, fill = party))+
scale_fill_manual(labels = good_data_all$total_seats)
})
}
library(tidyverse)
library(janitor)
library(ggpol)
data <- readxl::read_xlsx('data/general_results_2019.xlsx')
seats <- readxl::read_xlsx('data/seats.xlsx')
zirou <- function(x){
x %>%
replace_na(., 0)
}
# preparing data
data_clean <- data %>%
clean_names() %>%
mutate_all(.funs = zirou)
seats <-seats %>%
rename('state' = 'Circonscription',
'n_of_seats' = Sièges)
data_ready <- data_clean %>%
pivot_longer(cols = afek_tounes:autres,
values_to = 'votes',
names_to = 'party') %>%
rename('state'='name_fr') %>%
left_join(seats, by = 'state')
good_data <- function(data, x){
data_numbers <- data %>%
group_by(state) %>%
mutate(total_votes = sum(votes),
percent = votes/total_votes) %>%
filter(percent >= x) %>%
filter(party != 'autres') %>%
mutate(hare_quota = total_votes/n_of_seats,
party_quota = votes/hare_quota,
quota_seats = as.integer(party_quota),
remains = party_quota - quota_seats,
remains_seats = 0) %>%
mutate(remaining_seat = n_of_seats - sum(quota_seats)) %>%
arrange(desc(remains), .by_group = T) %>%
ungroup()
remaining_list <- data_numbers %>%
select(state, party, remaining_seat) %>%
nest_by(state, remaining_seat) %>%
mutate(data = map2(data, remaining_seat, function(x,y) rep(x,3)[1:y])) %>%
unnest(data) %>%
add_column(remains_seats = 0) %>%
mutate(remains_seats = remains_seats+1)
good_data_remains <- remaining_list %>%
group_by(data) %>% # cna group by state fro mapping later for an anlysis for a state by state
summarize(r_seats = sum(remains_seats)) %>%
rename('party' = 'data')
good_data_quota <- data_numbers %>%
group_by(party) %>%
summarise(q_seats = sum(quota_seats))
good_data_all <- good_data_quota %>%
left_join(good_data_remains, by = 'party') %>%
mutate(r_seats = zirou(r_seats),
total_seats = q_seats + r_seats) %>%
filter(total_seats != 0)
return(good_data_all)
}
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("percent",
"Threshhold on the percentqge of votes on every juristiction",
min = 0,
max = 20,
value = 0)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("seats")
)
)
)
server <- function(input, output) {
output$seats <- renderPlot({
# generate bins based on input$bins from ui.R
data_to_use <- good_data(data_ready, x = input$percent)
data_to_use %>%
mutate(party = fct_reorder(party, total_seats)) %>%
ggplot() +
geom_col(aes(x = total_seats,
y = party, fill = party))+
scale_fill_manual(labels = good_data_all$total_seats)
})
}
library(shiny)
library(tidyverse)
library(janitor)
library(ggpol)
data <- readxl::read_xlsx('data/general_results_2019.xlsx')
seats <- readxl::read_xlsx('data/seats.xlsx')
zirou <- function(x){
x %>%
replace_na(., 0)
}
# preparing data
data_clean <- data %>%
clean_names() %>%
mutate_all(.funs = zirou)
seats <-seats %>%
rename('state' = 'Circonscription',
'n_of_seats' = Sièges)
data_ready <- data_clean %>%
pivot_longer(cols = afek_tounes:autres,
values_to = 'votes',
names_to = 'party') %>%
rename('state'='name_fr') %>%
left_join(seats, by = 'state')
good_data <- function(data, x){
data_numbers <- data %>%
group_by(state) %>%
mutate(total_votes = sum(votes),
percent = votes/total_votes) %>%
filter(percent >= x) %>%
filter(party != 'autres') %>%
mutate(hare_quota = total_votes/n_of_seats,
party_quota = votes/hare_quota,
quota_seats = as.integer(party_quota),
remains = party_quota - quota_seats,
remains_seats = 0) %>%
mutate(remaining_seat = n_of_seats - sum(quota_seats)) %>%
arrange(desc(remains), .by_group = T) %>%
ungroup()
remaining_list <- data_numbers %>%
select(state, party, remaining_seat) %>%
nest_by(state, remaining_seat) %>%
mutate(data = map2(data, remaining_seat, function(x,y) rep(x,3)[1:y])) %>%
unnest(data) %>%
add_column(remains_seats = 0) %>%
mutate(remains_seats = remains_seats+1)
good_data_remains <- remaining_list %>%
group_by(data) %>% # cna group by state fro mapping later for an anlysis for a state by state
summarize(r_seats = sum(remains_seats)) %>%
rename('party' = 'data')
good_data_quota <- data_numbers %>%
group_by(party) %>%
summarise(q_seats = sum(quota_seats))
good_data_all <- good_data_quota %>%
left_join(good_data_remains, by = 'party') %>%
mutate(r_seats = zirou(r_seats),
total_seats = q_seats + r_seats) %>%
filter(total_seats != 0)
return(good_data_all)
}
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("percent",
"Threshhold on the percentqge of votes on every juristiction",
min = 0,
max = 20,
value = 0)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("seats")
)
)
)
server <- function(input, output) {
output$seats <- renderPlot({
# generate bins based on input$bins from ui.R
data_to_use <- good_data(data_ready, x = input$percent)
data_to_use %>%
mutate(party = fct_reorder(party, total_seats)) %>%
ggplot() +
geom_col(aes(x = total_seats,
y = party, fill = party))+
scale_fill_manual(labels = good_data_all$total_seats)
})
}
runApp()
shiny::runApp()
bslib
install.packages('bslib')
runApp()
bslib::bs_theme(bootswatch = "litera")
bslib::bs_theme(bootswatch = "litera")
runApp()
runApp()
